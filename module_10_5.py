
from multiprocessing import Pool
from datetime import datetime


def read_info(name):
    all_data = []
    with open(name, 'r', encoding='utf-8') as file:
        while True:
            line = file.readline()
            if not line:
                break
            else:
                all_data.append(line)


if __name__ == '__main__':

    filenames = [f'./file {number}.txt' for number in range(1, 5)]

    start = datetime.now()
    for filename in filenames:
        read_info(filename)
    end = datetime.now()
    print(f"Линейный вызов занял: {end - start} секунд")

    start_1 = datetime.now()
    with Pool(processes=4) as pool:
        pool.map(read_info, filenames)
    end_1 = datetime.now()
    print(f"Многопроцессный вызов занял: {end_1 - start_1} секунд")
# Домашнее задание по теме "Многопроцессное программирование"

"""
Цель: понять разницу между линейным и многопроцессным подходом, выполнив операции обоими способами.

Задача "Многопроцессное считывание":
Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.

Подготовка:
Скачайте архив с файлами для считывания данных и распакуйте его в проект для дальнейшего использования.

Выполнение:
Создайте функцию read_info(name), где name - название файла. Функция должна:
1. Создавать локальный список all_data.
2. Открывать файл name для чтения.
3. Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
4. Во время считывания добавлять каждую строку в список all_data.

Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.
1. Создайте список названий файлов в соответствии с названиями файлов архива.
2. Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в консоль.
3. Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер with и объект Pool.
Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов.
Измерьте время выполнения и выведите его в консоль.

Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности,
предварительно закомментировав другой.
"""